package org.tron.core;

import static org.tron.core.zksnark.LibrustzcashTest.librustzcashInitZksnarkParams;

import com.google.protobuf.ByteString;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import java.io.File;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;
import org.tron.api.GrpcAPI;
import org.tron.api.GrpcAPI.BytesMessage;
import org.tron.api.GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk;
import org.tron.api.GrpcAPI.ShieldedTRC20TriggerContractParameters;
import org.tron.api.GrpcAPI.SpendAuthSigParameters;
import org.tron.api.WalletGrpc;
import org.tron.api.WalletSolidityGrpc;
import org.tron.common.application.TronApplicationContext;
import org.tron.common.runtime.TvmTestUtils;
import org.tron.common.storage.DepositImpl;
import org.tron.common.utils.*;
import org.tron.common.zksnark.JLibrustzcash;
import org.tron.common.zksnark.LibrustzcashParam;
import org.tron.consensus.base.Param;
import org.tron.core.capsule.*;
import org.tron.core.capsule.TransactionCapsule;
import org.tron.core.capsule.WitnessCapsule;
import org.tron.core.config.DefaultConfig;
import org.tron.core.config.args.Args;
import org.tron.core.db.Manager;
import org.tron.core.exception.ContractValidateException;
import org.tron.core.exception.ZksnarkException;
import org.tron.core.services.http.JsonFormat;
import org.tron.core.util.BuildContract;
import org.tron.core.util.ProduceBlock;
import org.tron.core.zen.address.DiversifierT;
import org.tron.core.zen.address.ExpandedSpendingKey;
import org.tron.core.zen.address.FullViewingKey;
import org.tron.core.zen.address.IncomingViewingKey;
import org.tron.core.zen.address.KeyIo;
import org.tron.core.zen.address.PaymentAddress;
import org.tron.core.zen.address.SpendingKey;
import org.tron.core.zen.note.Note;
import org.tron.protos.Protocol;
import org.tron.protos.Protocol.Transaction;
import org.tron.protos.Protocol.TransactionInfo;
import org.tron.protos.contract.ShieldContract;
import org.tron.protos.contract.SmartContractOuterClass;
import stest.tron.wallet.common.client.Parameter;
import stest.tron.wallet.common.client.WalletClient;
import stest.tron.wallet.common.client.utils.AbiUtil;
import stest.tron.wallet.common.client.utils.PublicMethed;

@Slf4j
public class ShieldedTRC20ContractTest {

  private static ManagedChannel channelFull = null;
  private static WalletGrpc.WalletBlockingStub blockingStubFull = null;
  private static ManagedChannel channelSolidity = null;
  private static WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;
  private static String fullnode = "127.0.0.1:50051";
  private static String soliditynode = "127.0.0.1:50061";
  private static String dbPath = "output_contract_test";
  private static TronApplicationContext context;
  private static Wallet wallet;
  private static Manager manager;
  private static DepositImpl deposit;

  private static Transaction transaction1;
  private static Transaction transaction2;
  private static ByteString trId1;
  private static ByteString trId2;
  private static byte[] ownerAddressBytes = null;

  private static String trc20ContractAddress = "TX89RWqH3gX3m5wvZvSDaedyLBF4SzZqy5";
  private static String shieldedTRC20ContractAddress = "TB8MuSWh979b4donqWUZtFJ4aYAemZ1R6U";
  private static String privateKey = "650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812";
  private static String pubAddress = "TFsrP7YcSSRwHzLPwaCnXyTKagHs8rXKNJ";


  static {
    Args.setParam(new String[]{"-d", dbPath}, Constant.TEST_CONF);
    context = new TronApplicationContext(DefaultConfig.class);
  }

  @BeforeClass
  public static void beforeClass() {
    ownerAddressBytes = WalletClient.decodeFromBase58Check(pubAddress);
    wallet = context.getBean(Wallet.class);
    manager = context.getBean(Manager.class);

    /**
     * type 1, to create account for unit test.
     */
    deposit = DepositImpl.createRoot(manager);
    deposit.createAccount(ownerAddressBytes, Protocol.AccountType.Normal);
    deposit.addBalance(ownerAddressBytes, 100000000);
    deposit.commit();

    /**
     * type 2, to create account for unit test.
     */
    AccountCapsule ownerCapsule =
            new AccountCapsule(
                    ByteString.copyFromUtf8("testAAA"),
                    ByteString.copyFrom(ownerAddressBytes),
                    Protocol.AccountType.Normal,
                    manager.getDynamicPropertiesStore().getAssetIssueFee());
    ownerCapsule.setBalance(88888888888880L);
    manager.getAccountStore().put(ownerCapsule.getAddress().toByteArray(), ownerCapsule);

    channelFull = ManagedChannelBuilder.forTarget(fullnode).usePlaintext(true)
            .build();
    blockingStubFull = WalletGrpc.newBlockingStub(channelFull);
    channelSolidity = ManagedChannelBuilder.forTarget(soliditynode)
            .usePlaintext(true)
            .build();
    blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);
    Args.getInstance().setFullNodeAllowShieldedTRC20TransactionArgs(true);
    Wallet.setAddressPreFixByte(Parameter.CommonConstant.ADD_PRE_FIX_BYTE_MAINNET);

    deployContract1();
    deployContract2();

    // need produce block for contract to valid
    produceBlock();
  }

  private static void produceBlock() {
    ProduceBlock.addTransactionToStore(transaction1, manager);
    ProduceBlock.addTransactionToStore(transaction2, manager);
    Protocol.Block block1 = ProduceBlock.getBuildBlock(DateTime.now().minusDays(4).getMillis(), 1, 12,
            ByteArray.toHexString(ownerAddressBytes), transaction1, transaction2);
    ProduceBlock.addBlockToStore(block1, manager);
    ProduceBlock.addTransactionInfoToStore(transaction1, manager);
    ProduceBlock.addTransactionInfoToStore(transaction2, manager);
    manager.getDynamicPropertiesStore().saveLatestBlockHeaderNumber(1);
  }

  private static void deployContract1() {
    logger.info(" ------ deployContract1 test start ------- ");

    byte[] ownerAddress = ownerAddressBytes;
    String contractName = "USDT";
    String abiStr = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressFounder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]";
    String codeStr = "60c0604052600660808190527f54726f6e6978000000000000000000000000000000000000000000000000000060a090815261003e916000919061013c565b506040805180820190915260038082527f545258000000000000000000000000000000000000000000000000000000000060209092019182526100839160019161013c565b506006600281905560006005558054600160a860020a03191690553480156100aa57600080fd5b50604051602080610abc83398101604081815291516006805461010060a860020a031916336101000217905567016345785d8a00006005819055600160a060020a03821660008181526003602090815286822084905592855294519294909390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506101d7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017d57805160ff19168380011785556101aa565b828001600101855582156101aa579182015b828111156101aa57825182559160200191906001019061018f565b506101b69291506101ba565b5090565b6101d491905b808211156101b657600081556001016101c0565b90565b6108d6806101e66000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d457806307da68f51461015e578063095ea7b31461017557806318160ddd146101ad57806323b872dd146101d4578063313ce567146101fe57806342966c681461021357806370a082311461022b57806375f12b211461024c57806395d89b4114610261578063a9059cbb14610276578063be9a65551461029a578063c47f0027146102af578063dd62ed3e14610308575b600080fd5b3480156100e057600080fd5b506100e961032f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b506101736103bd565b005b34801561018157600080fd5b50610199600160a060020a03600435166024356103e5565b604080519115158252519081900360200190f35b3480156101b957600080fd5b506101c261049e565b60408051918252519081900360200190f35b3480156101e057600080fd5b50610199600160a060020a03600435811690602435166044356104a4565b34801561020a57600080fd5b506101c26105c1565b34801561021f57600080fd5b506101736004356105c7565b34801561023757600080fd5b506101c2600160a060020a036004351661065e565b34801561025857600080fd5b50610199610670565b34801561026d57600080fd5b506100e9610679565b34801561028257600080fd5b50610199600160a060020a03600435166024356106d3565b3480156102a657600080fd5b5061017361079d565b3480156102bb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101739436949293602493928401919081908401838280828437509497506107c29650505050505050565b34801561031457600080fd5b506101c2600160a060020a03600435811690602435166107f2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b55780601f1061038a576101008083540402835291602001916103b5565b820191906000526020600020905b81548152906001019060200180831161039857829003601f168201915b505050505081565b6006546101009004600160a060020a031633146103d657fe5b6006805460ff19166001179055565b60065460009060ff16156103f557fe5b3315156103fe57fe5b81158061042c5750336000908152600460209081526040808320600160a060020a0387168452909152902054155b151561043757600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055481565b60065460009060ff16156104b457fe5b3315156104bd57fe5b600160a060020a0384166000908152600360205260409020548211156104e257600080fd5b600160a060020a038316600090815260036020526040902054828101101561050957600080fd5b600160a060020a038416600090815260046020908152604080832033845290915290205482111561053957600080fd5b600160a060020a03808416600081815260036020908152604080832080548801905593881680835284832080548890039055600482528483203384528252918490208054879003905583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60025481565b336000908152600360205260409020548111156105e357600080fd5b336000818152600360209081526040808320805486900390558280527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff805486019055805185815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350565b60036020526000908152604090205481565b60065460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b55780601f1061038a576101008083540402835291602001916103b5565b60065460009060ff16156106e357fe5b3315156106ec57fe5b3360009081526003602052604090205482111561070857600080fd5b600160a060020a038316600090815260036020526040902054828101101561072f57600080fd5b33600081815260036020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6006546101009004600160a060020a031633146107b657fe5b6006805460ff19169055565b6006546101009004600160a060020a031633146107db57fe5b80516107ee90600090602084019061080f565b5050565b600460209081526000928352604080842090915290825290205481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061085057805160ff191683800117855561087d565b8280016001018555821561087d579182015b8281111561087d578251825591602001919060010190610862565b5061088992915061088d565b5090565b6108a791905b808211156108895760008155600101610893565b905600a165627a7a72305820c3cd255c6c865dcbdec5a1305c297f73823446d27588a9d8c2d52406c1ef42bd0029";
    String constructorStr = "TronToken(address)";
    String argsStr = "\"TFsrP7YcSSRwHzLPwaCnXyTKagHs8rXKNJ\"";
    boolean isHex = false;
    long feeLimit = 10000000L;
    long consumeUserResourcePercent = 30L;
    long originEnergyLimit = 1000000000L;

    if (!constructorStr.equals("#")) {
      if (isHex) {
        codeStr += argsStr;
      } else {
        codeStr += Hex.toHexString(AbiUtil.encodeInput(constructorStr, argsStr));
      }
    }

    long value = 0L;
    long tokenValue = 0L;
    String tokenId = "";
    String libraryAddressPair = null;
    String compilerVersion = null;

    SmartContractOuterClass.CreateSmartContract message =
            BuildContract.deployContractMsg(
                    contractName,
                    ownerAddress,
                    abiStr,
                    codeStr,
                    value,
                    consumeUserResourcePercent,
                    originEnergyLimit,
                    tokenValue,
                    tokenId,
                    libraryAddressPair,
                    compilerVersion);

    try {
      TransactionCapsule transactionCapsule = wallet.createTransactionCapsule(message,
              Transaction.Contract.ContractType.CreateSmartContract);
      transaction1 = transactionCapsule.getInstance();
      logger.info(" >>>> transactionCapsule:{}", transaction1);
      byte[] bytes1 = WalletUtil.generateContractAddress(transaction1);
      trc20ContractAddress = WalletUtil.encode58Check(bytes1);
      trId1 = transactionCapsule.getTransactionId().getByteString();
      logger.info(" >>>> trId:{}", transactionCapsule.getTransactionId().toString());

      SmartContractOuterClass.SmartContract smartContract = SmartContractOuterClass.SmartContract.newBuilder()
              .setOriginAddress(ByteString.copyFrom(ownerAddressBytes))
              .setContractAddress(ByteString.copyFrom(bytes1))
              .build();

      manager.getContractStore().put(bytes1, new ContractCapsule(smartContract));
      logger.info(" >>>> transactionCapsule.trc20ContractAddress:{}", trc20ContractAddress);
      logger.info(" ------ deployContract1 test end ------- ");
    } catch (ContractValidateException e) {
      logger.error(e.getMessage(), e);
    }
  }

  private static void deployContract2() {
    logger.info(" ------ deployContract2 test start ------- ");
    byte[] ownerAddress = ownerAddressBytes;
    String contractName = "PrivateUSDT";
    String abiStr = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trc20ContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cv\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"epk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[21]\",\"name\":\"c\",\"type\":\"bytes32[21]\"}],\"name\":\"newLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"tokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"tokenMint\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[10]\",\"name\":\"input\",\"type\":\"bytes32[10]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"spend_auth_sig\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[2]\",\"name\":\"bindingSignature\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"payToAddress\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getPath\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[32]\",\"name\":\"\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[9]\",\"name\":\"output\",\"type\":\"bytes32[9]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"bindingSignature\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[21]\",\"name\":\"c\",\"type\":\"bytes32[21]\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"notecommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[10][]\",\"name\":\"input\",\"type\":\"bytes32[10][]\"},{\"internalType\":\"bytes32[2][]\",\"name\":\"spend_auth_sig\",\"type\":\"bytes32[2][]\"},{\"internalType\":\"bytes32[9][]\",\"name\":\"output\",\"type\":\"bytes32[9][]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"bindingSignature\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[21][]\",\"name\":\"c\",\"type\":\"bytes32[21][]\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]";
    String codeStr = "6104806040527f010000000000000000000000000000000000000000000000000000000000000060809081527f817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15560a0527fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3460c0527fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c60e0527fe110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b49610100527f912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a610120527f8ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613610140527fd6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813610160527f7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444610180527f43ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b6101a0527fba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce726101c0527f4777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c6101e0527fec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048610200527f1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651610220527fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c610240527fd6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f610260527f1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451610280527f6edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c6102a0527fcd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006102c0527f6aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b1592166102e0527f8d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673610300527f08eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023610320527f0769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c49610340527f4c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850610360527ffee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712610380527f16d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a6103a0527fd2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb586103c0527fa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a6103e0527f28e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a610400527fe1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef72610420527f12935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d610440527fb2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381461046052620004b390600490602062000541565b506048805460ff60a01b19169055348015620004ce57600080fd5b50d38015620004dc57600080fd5b50d28015620004ea57600080fd5b5060405162002913380380620029138339810160408190526200050d91620005c3565b60478054336001600160a01b031991821617909155604880549091166001600160a01b039290921691909117905562000631565b826020810192821562000572579160200282015b828111156200057257825182559160200191906001019062000555565b506200058092915062000584565b5090565b620005a191905b808211156200058057600081556001016200058b565b90565b8051620005b18162000617565b620005bc81620005ec565b9392505050565b600060208284031215620005d657600080fd5b6000620005e48484620005a4565b949350505050565b6000620005f982620005ff565b92915050565b6001600160a01b031690565b6001600160a81b031690565b62000622816200060b565b81146200062e57600080fd5b50565b6122d280620006416000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b50600436106100b85760003560e01c80638cc73526116100805780638cc73526146101295780639110a55b1461013c578063ae6dead71461014f578063d7b0fef114610162578063e17650731461016a576100b8565b806311a1dd45146100bd5780632997e86b146100d257806330e69fc3146100fb57806331352936146101035780633890ef2714610116575b600080fd5b6100d06100cb366004611589565b61018c565b005b6100e56100e036600461154d565b610520565b6040516100f29190611fb2565b60405180910390f35b6100e5610532565b6100e561011136600461154d565b610538565b6100d06101243660046114b5565b61054a565b6100e561013736600461154d565b6107a9565b6100d061014a3660046113d0565b6107bb565b6100e561015d36600461154d565b610ed8565b6100e5610eea565b61017d61017836600461154d565b610ef0565b6040516100f293929190611fc0565b3367ffffffffffffffff85166101bd5760405162461bcd60e51b81526004016101b49061204a565b60405180910390fd5b8335600090815260036020526040902054156101eb5760405162461bcd60e51b81526004016101b490611fea565b60006002308787866040516020016102069493929190611dc3565b60408051601f198184030181529082905261022091611e0d565b602060405180830381855afa15801561023d573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250610260919081019061156b565b90506060600b86868985602460455460405161028196959493929190611f52565b600060405180830381855afa15801561029e573d6000803e3d6000fd5b5050503d80600081146102cd576040519150601f19603f3d011682016040523d82523d6000602084013e6102d2565b606091505b50905060006102e2826000611046565b9050806103015760405162461bcd60e51b81526004016101b49061201a565b60008260208151811061031057fe5b6020910181015160455463ffffffff016000818152600290935260409092208a35905560f81c9150816103435788356024555b60015b826001018110156103a9576002600019830104915061036b8560016020840201611046565b600083815260026020526040902055808314156103a1576000828152600260205260409020546024846021811061039e57fe5b01555b600101610346565b506103ba8460216020850201611046565b60468190556000818152600160208181526040928390209390935560458054918201905581517f0ebebecab444e844f5b4a1eae0cbe69746f67e6471709f021108012497cb8acd9361041a938e3592918f013591908f0135908d906120ca565b60405180910390a16000604860009054906101000a90046001600160a01b03166001600160a01b03166323b872dd88308e6040518463ffffffff1660e01b815260040161046993929190611e20565b602060405180830381600087803b15801561048357600080fd5b505af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104bb919081019061152f565b9050806104da5760405162461bcd60e51b81526004016101b49061200a565b7fc7b2d336206fdb73b39cf70907a3ad361553e22d6a7655dea8537c091fcd20e9878c60405161050b929190611e63565b60405180910390a15050505050505050505050565b60006020819052908152604090205481565b60455481565b60026020526000908152604090205481565b8435602086013567ffffffffffffffff85166105785760405162461bcd60e51b81526004016101b49061204a565b600082815260208190526040902054156105a45760405162461bcd60e51b81526004016101b49061207a565b6000818152600160205260409020546105cf5760405162461bcd60e51b81526004016101b49061202a565b600083905060006002308a848a6040516020016105ef9493929190611d7a565b60408051601f198184030181529082905261060991611e0d565b602060405180830381855afa158015610626573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250610649919081019061156b565b90506000600d8a8a8a8a86604051610665959493929190611f01565b602060405180830381855afa158015610682573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052506106a5919081019061152f565b9050806106c45760405162461bcd60e51b81526004016101b49061201a565b600085815260208190526040808220879055604854905163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906107079087908d90600401611e48565b602060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610759919081019061152f565b9050806107785760405162461bcd60e51b81526004016101b49061203a565b7ff692eb02a7f3109ddf162c888cb626f64e6e37b560f020eb041be9be9b49f85a848a60405161050b929190611e63565b60036020526000908152604090205481565b600188108015906107cd575060028811155b6107e95760405162461bcd60e51b81526004016101b49061205a565b8786146108085760405162461bcd60e51b81526004016101b49061209a565b6048805460ff60a01b191690555b604854600160a01b900460ff168811156109235760485460009081908b908b90600160a01b900460ff1681811061084957fe5b905061014002016000600a811061085c57fe5b60200201358152602001908152602001600020546000801b146108915760405162461bcd60e51b81526004016101b49061207a565b6048546001906000908b908b90600160a01b900460ff168181106108b157fe5b905061014002016001600a81106108c457fe5b60200201358152602001908152602001600020546000801b14156108fa5760405162461bcd60e51b81526004016101b49061202a565b60488054600160ff600160a01b808404821692909201160260ff60a01b19909116179055610816565b6048805460ff60a01b191690555b604854600160a01b900460ff168411156109d65760485460039060009087908790600160a01b900460ff1681811061096557fe5b9050610120020160006009811061097857fe5b60200201358152602001908152602001600020546000801b146109ad5760405162461bcd60e51b81526004016101b4906120ba565b60488054600160ff600160a01b808404821692909201160260ff60a01b19909116179055610931565b60006002308b8b898988886040516020016109f79796959493929190611d36565b60408051601f1981840301815290829052610a1191611e0d565b602060405180830381855afa158015610a2e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250610a51919081019061156b565b905060018510801590610a65575060028511155b610a815760405162461bcd60e51b81526004016101b4906120aa565b848214610aa05760405162461bcd60e51b81526004016101b49061206a565b6060600c8b8b8b8b8b8b8b896024604554604051610ac79a99989796959493929190611e7e565b600060405180830381855afa158015610ae4573d6000803e3d6000fd5b5050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5090506000610b28826000611046565b905080610b475760405162461bcd60e51b81526004016101b490611ffa565b6048805460ff60a01b1916905560005b604854600160a01b900460ff16881115610cb8576000838260200181518110610b7c57fe5b016020015160485460455460019094019360f89290921c9250600160a01b900460ff1690810163ffffffff01908b908b90818110610bb657fe5b90506101200201600060098110610bc957fe5b600083815260026020908152604090912091029190910135905581610c1e576048548b908b90600160a01b900460ff16818110610c0257fe5b90506101200201600060098110610c1557fe5b60200201356024555b60015b82600101811015610c8c5760026000198301049150610c438685602001611046565b600083815260026020908152604090912091909155939093019280831415610c845760008281526002602052604090205460248460218110610c8157fe5b01555b600101610c21565b505060488054600160ff600160a01b808404821692909201160260ff60a01b1990911617905550610b57565b610cc58382602001611046565b604681905560008181526001602052604090205560458054890190556048805460ff60a01b191690555b604854600160a01b900460ff168c1115610d76576048546000908e908e90600160a01b900460ff16818110610d2057fe5b905061014002016000600a8110610d3357fe5b602090810291909101356000818152918290526040909120555060488054600160ff600160a01b808404821692909201160260ff60a01b19909116179055610cef565b6048805460ff60a01b191690555b604854600160a01b900460ff16881115610ec9576048546045547f0ebebecab444e844f5b4a1eae0cbe69746f67e6471709f021108012497cb8acd91600160a01b900460ff16808b03909103908b908b90818110610dde57fe5b90506101200201600060098110610df157fe5b60200201358b8b604860149054906101000a900460ff1660ff16818110610e1457fe5b90506101200201600160098110610e2757fe5b60200201358c8c604860149054906101000a900460ff1660ff16818110610e4a57fe5b90506101200201600260098110610e5d57fe5b60200201358a8a604860149054906101000a900460ff1660ff16818110610e8057fe5b90506102a00201604051610e989594939291906120ca565b60405180910390a160488054600160ff600160a01b808404821692909201160260ff60a01b19909116179055610d84565b50505050505050505050505050565b60016020526000908152604090205481565b60465481565b6000610efa61122c565b600063ffffffff8401610f0b61122c565b6045548610610f2c5760405162461bcd60e51b81526004016101b49061208a565b6000610f378761108e565b90506000610f4588836110dd565b905060005b60208163ffffffff161015611034578263ffffffff168163ffffffff161415610f8d57818482601f0363ffffffff1660208110610f8357fe5b6020020152611022565b60028506610fc15760026000600187038152602001908152602001600020548482601f0363ffffffff1660208110610f8357fe5b6001850160009081526002602052604090205415610ff15760018501600090815260026020526040902054611007565b60048163ffffffff166020811061100457fe5b01545b8482601f0363ffffffff166020811061101c57fe5b60200201525b60026000198601049450600101610f4a565b50506046549791969550909350505050565b600080805b60208110156110845780600802858583018151811061106657fe5b01602001516001600160f81b031916901c919091179060010161104b565b5090505b92915050565b60455460009063ffffffff83019063fffffffe01825b60026000198301046002600019850104146110d55760026000198401049250600260001983010491506001016110a4565b949350505050565b60455463fffffffe0160008181526002602052604081205490918291829163ffffffff8088019290871661115e578183101561111f5794506110889350505050565b8183141561115e576002830661114e575050600019016000908152600260205260409020549250611088915050565b5050600454935061108892505050565b60005b8763ffffffff168163ffffffff161015611220576002830661119d576000198301600090815260026020526040902054955090935083906111b8565b81955060048163ffffffff16602081106111b357fe5b015494505b600e8187876040516111cc9392919061210d565b602060405180830381855afa1580156111e9573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525061120c919081019061156b565b915060026000198401049250600101611161565b50979650505050505050565b6040518061040001604052806020906020820280388339509192915050565b60008083601f84011261125d57600080fd5b50813567ffffffffffffffff81111561127557600080fd5b6020830191508361014082028301111561128e57600080fd5b9250929050565b60008083601f8401126112a757600080fd5b50813567ffffffffffffffff8111156112bf57600080fd5b602083019150836102a082028301111561128e57600080fd5b60008083601f8401126112ea57600080fd5b50813567ffffffffffffffff81111561130257600080fd5b60208301915083604082028301111561128e57600080fd5b60008083601f84011261132c57600080fd5b50813567ffffffffffffffff81111561134457600080fd5b6020830191508361012082028301111561128e57600080fd5b80610140810183101561108857600080fd5b806102a0810183101561108857600080fd5b806040810183101561108857600080fd5b80610120810183101561108857600080fd5b805161108881612241565b803561108881612258565b805161108881612258565b803561108881612261565b600080600080600080600080600060c08a8c0312156113ee57600080fd5b893567ffffffffffffffff81111561140557600080fd5b6114118c828d0161124b565b995099505060208a013567ffffffffffffffff81111561143057600080fd5b61143c8c828d016112d8565b975097505060408a013567ffffffffffffffff81111561145b57600080fd5b6114678c828d0161131a565b9550955050606061147a8c828d01611381565b93505060a08a013567ffffffffffffffff81111561149757600080fd5b6114a38c828d01611295565b92509250509295985092959850929598565b600080600080600061020086880312156114ce57600080fd5b60006114da888861135d565b9550506101406114ec88828901611381565b9450506101806114fe888289016113c5565b9350506101a061151088828901611381565b9250506101e0611522888289016113af565b9150509295509295909350565b60006020828403121561154157600080fd5b60006110d584846113a4565b60006020828403121561155f57600080fd5b60006110d584846113af565b60006020828403121561157d57600080fd5b60006110d584846113ba565b60008060008061042085870312156115a057600080fd5b60006115ac87876113c5565b94505060206115bd87828801611392565b9350506101406115cf87828801611381565b9250506101806115e18782880161136f565b91505092959194509250565b60006115f9838361184d565b50506101400190565b600061160e838361185e565b50506102a00190565b6000611623838361186b565b505060400190565b6000611637838361191e565b50506101200190565b600061164c838361192b565b505060200190565b61165d81612181565b82525050565b61165d61166f82612181565b61220d565b6000611680838561216f565b935061168b82612135565b8060005b858110156116c1576116a1828461217d565b6116ab88826115ed565b97506116b683612148565b92505060010161168f565b509495945050505050565b60006116d88385612178565b93506116e382612135565b8060005b858110156116c1576116f9828461217d565b61170388826115ed565b975061170e83612148565b9250506001016116e7565b60006117258385612178565b935061173082612135565b8060005b858110156116c157611746828461217d565b6117508882611602565b975061175b8361214f565b925050600101611734565b6000611772838561216f565b935061177d82612135565b8060005b858110156116c157611793828461217d565b61179d8882611617565b97506117a883612156565b925050600101611781565b60006117bf838561216f565b93506117ca82612135565b8060005b858110156116c1576117e0828461217d565b6117ea888261162b565b97506117f58361215c565b9250506001016117ce565b600061180c8385612178565b935061181782612135565b8060005b858110156116c15761182d828461217d565b611837888261162b565b97506118428361215c565b92505060010161181b565b61185a61014083836121be565b5050565b61185a6102a083836121be565b61185a604083836121be565b61188081612138565b61188a8184612178565b925061189582612135565b8060005b838110156118c35781516118ad8782611640565b96506118b883612163565b925050600101611899565b505050505050565b6118d48161213e565b6118de8184612178565b92506118e982612135565b8060005b838110156118c3576118fe82612229565b6119088782611640565b965061191383612169565b9250506001016118ed565b61185a61012083836121be565b61165d81612135565b600061193f82612144565b6119498185612178565b93506119598185602086016121ca565b9290920192915050565b600061197060198361216f565b7f4475706c6963617465206e6f7465636f6d6d69746d656e747300000000000000815260200192915050565b60006119a9603d8361216f565b7f5468652070726f6f6620616e64207369676e617475726520686173206e6f742081527f6265656e2076657269666965642062792074686520636f6e7472616374000000602082015260400192915050565b6000611a0860148361216f565b732a3930b739b332b9233937b6903330b4b632b21760611b815260200192915050565b6000611a38603e8361216f565b7f5468652070726f6f6620616e64207369676e61747572652068617665206e6f7481527f206265656e2076657269666965642062792074686520636f6e74726163740000602082015260400192915050565b6000611a9760158361216f565b74151a1948185b98da1bdc881b5d5cdd08195e1a5cdd605a1b815260200192915050565b6000611ac860108361216f565b6f3a3930b739b332b9103330b4b632b21760811b815260200192915050565b6000611af460148361216f565b7326b4b73a103732b3b0ba34bb32903b30b63ab29760611b815260200192915050565b6000611b24601b8361216f565b7f696e707574206e756d626572206d7573742062652031206f7220320000000000815260200192915050565b6000611b5d60278361216f565b7f6f7574707574206e756d626572206d75737420626520657175616c20746f206381526610373ab6b132b960c91b602082015260400192915050565b6000611ba6603a8361216f565b7f546865206e6f7465636f6d6d69746d656e74206265696e67207370656e74206881527f617320616c7265616479206265656e206e756c6c696669656421000000000000602082015260400192915050565b6000611c0560298361216f565b7f706f736974696f6e2073686f756c6420626520736d616c6c6572207468616e208152681b19585990dbdd5b9d60ba1b602082015260400192915050565b6000611c5060338361216f565b7f696e707574206e756d626572206d75737420626520657175616c20746f20737081527232b7322fb0baba342fb9b4b390373ab6b132b960691b602082015260400192915050565b6000611ca5601c8361216f565b7f6f7574707574206e756d626572206d7573742062652031206f72203200000000815260200192915050565b6000611cde60188361216f565b7f4475706c6963617465206e6f7465636f6d6d69746d656e740000000000000000815260200192915050565b61165d8161219d565b61165d816121b3565b61165d816121a6565b61165d611d31826121a6565b61221e565b6000611d42828a611663565b601482019150611d5382888a6116cc565b9150611d60828688611800565b9150611d6d828486611719565b9998505050505050505050565b6000611d868287611663565b601482019150611d96828661184d565b61014082019150611da78285611663565b601482019150611db78284611d25565b50600801949350505050565b6000611dcf8287611663565b601482019150611ddf8286611d25565b600882019150611def828561191e565b61012082019150611e00828461185e565b506102a001949350505050565b6000611e198284611934565b9392505050565b60608101611e2e8286611654565b611e3b6020830185611654565b6110d56040830184611d13565b60408101611e568285611654565b611e196020830184611d13565b60408101611e718285611654565b611e196020830184611d1c565b6105008082528101611e91818c8e611674565b90508181036020830152611ea6818a8c611766565b90508181036040830152611ebb81888a6117b3565b9050611eca606083018761186b565b611ed760a083018661192b565b611ee460c08301856118cb565b611ef26104e083018461192b565b9b9a5050505050505050505050565b6102008101611f10828861184d565b611f1e61014083018761186b565b611f2c610180830186611d1c565b611f3a6101a083018561186b565b611f486101e083018461192b565b9695505050505050565b6105e08101611f61828961191e565b611f6f61012083018861186b565b611f7d610160830187611d1c565b611f8b61018083018661192b565b611f996101a08301856118cb565b611fa76105c083018461192b565b979650505050505050565b60208101611088828461192b565b6104408101611fcf828661192b565b611fdc6020830185611877565b6110d561042083018461192b565b6020808252810161108881611963565b602080825281016110888161199c565b60208082528101611088816119fb565b6020808252810161108881611a2b565b6020808252810161108881611a8a565b6020808252810161108881611abb565b6020808252810161108881611ae7565b6020808252810161108881611b17565b6020808252810161108881611b50565b6020808252810161108881611b99565b6020808252810161108881611bf8565b6020808252810161108881611c43565b6020808252810161108881611c98565b6020808252810161108881611cd1565b61032081016120d9828861192b565b6120e6602083018761192b565b6120f3604083018661192b565b612100606083018561192b565b611f48608083018461185e565b6060810161211b8286611d0a565b612128602083018561192b565b6110d5604083018461192b565b90565b50602090565b50602190565b5190565b6101400190565b6102a00190565b60400190565b6101200190565b60200190565b60010190565b90815260200190565b919050565b5090565b600061108882612191565b151590565b6001600160a01b031690565b63ffffffff1690565b67ffffffffffffffff1690565b6000611088826121a6565b82818337506000910152565b60005b838110156121e55781810151838201526020016121cd565b838111156121f4576000848401525b50505050565b600061108861220883612135565b612135565b60006110888260006110888261223b565b600061108882612235565b600061108882546121fa565b60c01b90565b60601b90565b61224a8161218c565b811461225557600080fd5b50565b61224a81612135565b61224a816121a656fea36474726f6e5820d1057755fab03b4efc3dc17557a49d3a1cd82d92fdbbd7ac41e4f5a9be173c246c6578706572696d656e74616cf564736f6c637828302e352e31322d646576656c6f702e323032302e342e31372b636f6d6d69742e30393966333037350065";
    String constructorStr = "constructor(address)";
    String argsStr = "\"TBNpqYo2pFMcFgHexaAqphSc38xDEcv4kC\"";
    boolean isHex = false;
    long feeLimit = 1000000000L;
    long consumeUserResourcePercent = 0L;
    long originEnergyLimit = 1000000000L;

    if (!constructorStr.equals("#")) {
      if (isHex) {
        codeStr += argsStr;
      } else {
        codeStr += Hex.toHexString(AbiUtil.encodeInput(constructorStr, argsStr));
      }
    }

    long value = 0L;
    long tokenValue = 0L;
    String tokenId = "";
    String libraryAddressPair = null;
    String compilerVersion = null;

    SmartContractOuterClass.CreateSmartContract message =
            BuildContract.deployContractMsg(
                    contractName,
                    ownerAddress,
                    abiStr,
                    codeStr,
                    value,
                    consumeUserResourcePercent,
                    originEnergyLimit,
                    tokenValue,
                    tokenId,
                    libraryAddressPair,
                    compilerVersion);

    try {
      TransactionCapsule transactionCapsule = wallet.createTransactionCapsule(message,
              Transaction.Contract.ContractType.CreateSmartContract);
      transaction2 = transactionCapsule.getInstance();
      logger.info(" >>>> transactionCapsule:{}", transaction2);
      byte[] bytes1 = WalletUtil.generateContractAddress(transaction2);
      shieldedTRC20ContractAddress = WalletUtil.encode58Check(bytes1);

      trId2 = transactionCapsule.getTransactionId().getByteString();
      logger.info(" >>>> trId:{}", transactionCapsule.getTransactionId().toString());
      Transaction transaction1 = wallet.getTransactionById(trId2);
      logger.info(" >>>> query. transactionCapsule:{}", transaction1);

      SmartContractOuterClass.SmartContract smartContract = SmartContractOuterClass.SmartContract.newBuilder()
              .setOriginAddress(ByteString.copyFrom(ownerAddressBytes))
              .setContractAddress(ByteString.copyFrom(bytes1))
              .build();

      manager.getContractStore().put(bytes1, new ContractCapsule(smartContract));
      logger.info(" >>>> transactionCapsule.shieldedTRC20ContractAddress:{}", shieldedTRC20ContractAddress);
      logger.info(" ------ deployContract2 test end ------- ");
    } catch (ContractValidateException e) {
      logger.error(e.getMessage(), e);
    }
  }


  @AfterClass
  public static void afterClass() throws InterruptedException {
    if (channelFull != null) {
      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
    if (channelSolidity != null) {
      channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }

//    Args.clearParam();
//    context.destroy();
//    FileUtil.deleteDir(new File(dbPath));
  }

  @Test
  public void getBalance() {
    logger.info(" ------ getBalance test start ------- ");
    WalletClient walletClient = new WalletClient(privateKey);
    byte[] address = walletClient.getAddress();
    logger.info(" >>>>> address:{}", address);
    logger.info(" >>>>> address:{}", ByteArray.toHexString(address));
    logger.info(" >>>>> address:{}", WalletClient.encode58Check(address));
    logger.info(" >>>>> addressBS:{}", pubAddress);

    ByteString addressBS = ByteString.copyFrom(ownerAddressBytes);
    Protocol.Account request = Protocol.Account.newBuilder().setAddress(addressBS).build();
    logger.info(" >>>>> request:{}", request);
    AccountCapsule account = deposit.getAccount(ownerAddressBytes);
    logger.info(" >>>>> deposit.account:{}", account);
    Protocol.Account account1 = wallet.getAccount(request);
    logger.info(" >>>>> wallet.account:{}", account1);

    Transaction transaction1 = wallet.getTransactionById(trId2);
    logger.info(" >>>> query. transactionCapsule1:{}", transaction1);
    Transaction transaction2 = wallet.getTransactionById(trId2);
    logger.info(" >>>> query. transactionCapsule2:{}", transaction2);

    try {
      byte[] bytes1 = WalletClient.decodeFromBase58Check(trc20ContractAddress);
      ContractCapsule contractCapsule = manager.getContractStore().get(bytes1);
      logger.info(" >>>>> get contract:{}", contractCapsule);

      byte[] bytes2 = WalletClient.decodeFromBase58Check(shieldedTRC20ContractAddress);
      ContractCapsule contractCapsule2 = manager.getContractStore().get(bytes2);
      logger.info(" >>>>> get contract:{}", contractCapsule2);
    } catch (Exception e) {
      logger.error(e.getMessage(), e);
    }

    logger.info(" ------ getBalance test end ------- ");
  }

  @Test
  public void setContractAllowance() {
    logger.info(" ------ setContractAllowance test start ------- ");
    byte[] contractAddress = WalletClient.decodeFromBase58Check(trc20ContractAddress);
    byte[] shieldedContractAddress = WalletClient.decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] shieldedContractAddressPadding = new byte[32];
    System.arraycopy(shieldedContractAddress, 0, shieldedContractAddressPadding, 11, 21);
    logger.info(" >>>>> shielded contract addr " + ByteArray.toHexString(shieldedContractAddressPadding));
    byte[] valueBytes = longTo32Bytes(100_000L);
    String input = Hex.toHexString(ByteUtil.merge(shieldedContractAddressPadding, valueBytes));
    String method = "approve(address,uint256)";
    boolean isHex = true;
    byte[] inputBytes = Hex.decode(AbiUtil.parseMethod(method, input, isHex));
    logger.info(" >>>>> input:{}", input);

    try {
      SmartContractOuterClass.TriggerSmartContract triggerSmartContractMsg = TvmTestUtils.buildTriggerSmartContract(
              ownerAddressBytes, contractAddress, inputBytes, 0L);

      TransactionCapsule trxCap = wallet.createTransactionCapsule(triggerSmartContractMsg,
              Transaction.Contract.ContractType.TriggerSmartContract);
      GrpcAPI.TransactionExtention.Builder trxExtBuilder = GrpcAPI.TransactionExtention.newBuilder();
      GrpcAPI.Return.Builder retBuilder = GrpcAPI.Return.newBuilder();
      Transaction transaction = wallet.triggerContract(triggerSmartContractMsg, trxCap, trxExtBuilder, retBuilder);
      logger.info(" >>>> rxId:{}", ByteArray.toHexString(transaction.getRawData().toByteArray()));
      produceBlock(transaction, 2);


      ByteString rxId = trxCap.getTransactionId().getByteString();
      logger.info(" >>>> rxId:{}", trxCap.getTransactionId().toString());
      logger.info(" >>>> rxId:{}", ByteArray.toHexString(Sha256Hash.hash(DBConfig.isECKeyCryptoEngine(),
              transaction.getRawData().toByteArray())));


      TransactionInfo transactionInfo = wallet.getTransactionInfoById(rxId);

      logger.info(" >>>> transaction:{}", JsonFormat.printToString(transaction));
      logger.info(" >>>> transaction:{}", transactionInfo == null);
    } catch (Exception e) {
      logger.error(e.getMessage(), e);
    }

    logger.info(" ------ setContractAllowance test end ------- ");
  }

  private static void produceBlock(Transaction transaction, int num) {
    ProduceBlock.addTransactionToStore(transaction, manager);
    Protocol.Block block1 = ProduceBlock.getBuildBlock(DateTime.now().minusDays(4).getMillis(), 1, 12,
            ByteArray.toHexString(ownerAddressBytes), transaction);
    ProduceBlock.addBlockToStore(block1, manager);
    ProduceBlock.addTransactionInfoToStore(transaction, manager);
    Param param = new Param();
    WitnessCapsule witness = new WitnessCapsule(ByteString.copyFrom(ownerAddressBytes));
    Param.Miner miner = param.new Miner(ByteArray.fromHexString(privateKey), witness.getAddress(), witness.getAddress());
    BlockCapsule blockCapsule = manager
            .generateBlock(miner, System.currentTimeMillis(), System.currentTimeMillis() + 1000);
    try {
      manager.pushBlock(blockCapsule);
    } catch (Exception e) {
      logger.error(e.getMessage(), e);
    }
    manager.getDynamicPropertiesStore().saveLatestBlockHeaderNumber(num);
  }


  @Ignore
  @Test
  public void printTRC20Address() {
    logger.info(Hex.toHexString(WalletClient.decodeFromBase58Check(trc20ContractAddress)));
  }

  @Ignore
  @Test
  public void getTrc20AccountBalance() {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(trc20ContractAddress);
    logger.info("trc20 contract address: " + ByteArray.toHexString(contractAddress));
    byte[] userAccountAddress = new byte[32];
    byte[] shieldedContractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    System.arraycopy(shieldedContractAddress, 0, userAccountAddress, 11, 21);
    String methodSign = "balanceOf(address)";
    byte[] selector = new byte[4];
    System.arraycopy(Hash.sha3(methodSign.getBytes()), 0, selector, 0, 4);
    byte[] input = ByteUtil.merge(selector, userAccountAddress);
    SmartContractOuterClass.TriggerSmartContract.Builder triggerBuilder = SmartContractOuterClass
            .TriggerSmartContract.newBuilder();
    triggerBuilder.setContractAddress(ByteString.copyFrom(contractAddress));
    triggerBuilder.setData(ByteString.copyFrom(input));
    GrpcAPI.TransactionExtention trxExt2 = blockingStubFull.triggerConstantContract(
            triggerBuilder.build());

    List<ByteString> list = trxExt2.getConstantResultList();
    byte[] listBytes = new byte[0];
    for (ByteString bs : list) {
      listBytes = ByteUtil.merge(listBytes, bs.toByteArray());
    }
    logger.info("balance " + Hex.toHexString(listBytes));
  }

  @Ignore
  @Test
  public void setAllowance() {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(trc20ContractAddress);
    byte[] shieldedContractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] shieldedContractAddressPadding = new byte[32];
    System.arraycopy(shieldedContractAddress, 0, shieldedContractAddressPadding, 11, 21);
    logger.info("shielded contract addr " + ByteArray.toHexString(shieldedContractAddressPadding));
    byte[] valueBytes = longTo32Bytes(100_000L);
    String input = Hex.toHexString(ByteUtil.merge(shieldedContractAddressPadding, valueBytes));
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    String txid = PublicMethed.triggerContract(contractAddress,
            "approve(address,uint256)",
            input,
            true,
            0L,
            1000000000L,
            callerAddress,
            privateKey,
            blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
            .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(
            Transaction.Result.contractResult.SUCCESS, infoById.get().getReceipt().getResult());
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForMint() throws ZksnarkException {
    librustzcashInitZksnarkParams();
    long fromAmount = 50;
    SpendingKey sk = SpendingKey.random();
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    byte[] ovk = expsk.getOvk();

    //ReceiveNote
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.decode(privateKey);
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 50;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    byte[] contractAddress = WalletClient.decodeFromBase58Check(shieldedTRC20ContractAddress);
    GrpcAPI.PrivateShieldedTRC20Parameters.Builder paramBuilder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    paramBuilder.setOvk(ByteString.copyFrom(ovk));
    paramBuilder.setFromAmount(fromAmount);
    paramBuilder.addShieldedReceives(revNoteBuilder.build());
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));

    GrpcAPI.ShieldedTRC20Parameters trc20MintParams = blockingStubFull
            .createShieldedContractParameters(paramBuilder.build());
    GrpcAPI.PrivateShieldedTRC20Parameters trc20Params = paramBuilder.build();
    logger.info(Hex.toHexString(trc20Params.getOvk().toByteArray()));
    logger.info(String.valueOf(trc20Params.getFromAmount()));
    logger.info(String.valueOf(trc20Params.getShieldedReceives(0).getNote().getValue()));
    logger.info(trc20Params.getShieldedReceives(0).getNote().getPaymentAddress());
    logger.info(Hex.toHexString(
            trc20Params.getShieldedReceives(0).getNote().getRcm().toByteArray()));
    logger.info(Hex.toHexString(trc20Params.getShieldedTRC20ContractAddress().toByteArray()));

    //verify receiveProof && bindingSignature
    boolean result;
    long ctx = JLibrustzcash.librustzcashSaplingVerificationCtxInit();
    ShieldContract.ReceiveDescription revDesc = trc20MintParams.getReceiveDescription(0);
    try {
      result = JLibrustzcash.librustzcashSaplingCheckOutput(
              new LibrustzcashParam.CheckOutputParams(
                      ctx,
                      revDesc.getValueCommitment().toByteArray(),
                      revDesc.getNoteCommitment().toByteArray(),
                      revDesc.getEpk().toByteArray(),
                      revDesc.getZkproof().toByteArray()));
      long valueBalance = -revValue;
      result &= JLibrustzcash.librustzcashSaplingFinalCheck(
              new LibrustzcashParam.FinalCheckParams(
                      ctx,
                      valueBalance,
                      trc20MintParams.getBindingSignature().toByteArray(),
                      trc20MintParams.getMessageHash().toByteArray()));
    } catch (Throwable any) {
      result = false;
    } finally {
      JLibrustzcash.librustzcashSaplingVerificationCtxFree(ctx);
    }
    Assert.assertTrue(result);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    String txid1 = triggerMint(blockingStubFull, contractAddress, callerAddress, privateKey,
            trc20MintParams.getTriggerContractInput());
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransfer1v1()
          throws ZksnarkException, ContractValidateException {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    String mintInput1 = mintParamsToHexString(mintParam1, 60);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    logger.info("..............mint result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20Parameters.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 60;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);
    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());

    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    privateTRC20Builder.setAsk(ByteString.copyFrom(expsk.getAsk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParameters(privateTRC20Builder.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            transferParam.getTriggerContractInput());
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransfer1v2()
          throws ZksnarkException, ContractValidateException {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 100, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);

    String mintInput1 = mintParamsToHexString(mintParam1, 100);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    logger.info("..............mint result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20Parameters.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 30;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    //ReceiveNote 2
    GrpcAPI.ReceiveNote.Builder revNoteBuilder2 = GrpcAPI.ReceiveNote.newBuilder();
    FullViewingKey fullViewingKey2 = sk.fullViewingKey();
    IncomingViewingKey incomingViewingKey2 = fullViewingKey2.inViewingKey();
    PaymentAddress paymentAddress2 = incomingViewingKey2.address(DiversifierT.random()).get();
    long revValue2 = 70;
    byte[] memo2 = new byte[512];
    byte[] rcm2 = Note.generateR();
    String paymentAddressStr2 = KeyIo.encodePaymentAddress(paymentAddress2);
    GrpcAPI.Note revNote2 = getNote(revValue2, paymentAddressStr2, rcm2, memo2);
    revNoteBuilder2.setNote(revNote2);
    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    privateTRC20Builder.addShieldedReceives(revNoteBuilder2.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();

    privateTRC20Builder.setAsk(ByteString.copyFrom(expsk.getAsk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParameters(privateTRC20Builder.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            transferParam.getTriggerContractInput());
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransfer2v1()
          throws ZksnarkException, ContractValidateException {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam2 = mintParams(
            privateKey, 40, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam2 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam2);

    String mintInput1 = mintParamsToHexString(mintParam1, 60);
    String mintInput2 = mintParamsToHexString(mintParam2, 40);
    String txid1 = triggerMint(blockingStubFull, contractAddress, callerAddress, privateKey,
            mintInput1);
    String txid2 = triggerMint(blockingStubFull, contractAddress, callerAddress, privateKey,
            mintInput2);
    logger.info("..............mint result...........");
    logger.info(txid1);
    logger.info(txid2);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());

    // SpendNoteTRC20 2
    Optional<TransactionInfo> infoById2 = PublicMethed
            .getTransactionInfoById(txid2, blockingStubFull);
    byte[] tx2Data = infoById2.get().getLog(0).getData().toByteArray();
    long pos2 = bytes32Tolong(ByteArray.subArray(tx2Data, 0, 32));
    byte[] contractResult2 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos2);
    byte[] path2 = ByteArray.subArray(contractResult2, 32, 1056);
    byte[] root2 = ByteArray.subArray(contractResult2, 0, 32);
    logger.info(Hex.toHexString(contractResult2));
    GrpcAPI.SpendNoteTRC20.Builder note2Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note2Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note2Builder.setPos(pos2);
    note2Builder.setPath(ByteString.copyFrom(path2));
    note2Builder.setRoot(ByteString.copyFrom(root2));
    note2Builder.setNote(mintPrivateParam2.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20Parameters.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());
    privateTRC20Builder.addShieldedSpends(note2Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 100;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    privateTRC20Builder.setAsk(ByteString.copyFrom(expsk.getAsk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParameters(privateTRC20Builder.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            transferParam.getTriggerContractInput());
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransfer2v2()
          throws ZksnarkException, ContractValidateException {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam2 = mintParams(
            privateKey, 40, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam2 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam2);

    String mintInput1 = mintParamsToHexString(mintParam1, 60);
    String mintInput2 = mintParamsToHexString(mintParam2, 40);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    String txid2 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput2);
    logger.info("..............mint result...........");
    logger.info(txid1);
    logger.info(txid2);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());

    // SpendNoteTRC20 2
    Optional<TransactionInfo> infoById2 = PublicMethed
            .getTransactionInfoById(txid2, blockingStubFull);
    byte[] tx2Data = infoById2.get().getLog(0).getData().toByteArray();
    long pos2 = bytes32Tolong(ByteArray.subArray(tx2Data, 0, 32));
    byte[] contractResult2 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos2);
    byte[] path2 = ByteArray.subArray(contractResult2, 32, 1056);
    byte[] root2 = ByteArray.subArray(contractResult2, 0, 32);
    logger.info(Hex.toHexString(contractResult2));
    GrpcAPI.SpendNoteTRC20.Builder note2Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note2Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note2Builder.setPos(pos2);
    note2Builder.setPath(ByteString.copyFrom(path2));
    note2Builder.setRoot(ByteString.copyFrom(root2));
    note2Builder.setNote(mintPrivateParam2.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20Parameters.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());
    privateTRC20Builder.addShieldedSpends(note2Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 31;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    //ReceiveNote 2
    GrpcAPI.ReceiveNote.Builder revNoteBuilder2 = GrpcAPI.ReceiveNote.newBuilder();
    FullViewingKey fullViewingKey2 = sk.fullViewingKey();
    IncomingViewingKey incomingViewingKey2 = fullViewingKey2.inViewingKey();
    PaymentAddress paymentAddress2 = incomingViewingKey2.address(DiversifierT.random()).get();
    long revValue2 = 69;
    byte[] memo2 = new byte[512];
    byte[] rcm2 = Note.generateR();
    String paymentAddressStr2 = KeyIo.encodePaymentAddress(paymentAddress2);
    GrpcAPI.Note revNote2 = getNote(revValue2, paymentAddressStr2, rcm2, memo2);
    revNoteBuilder2.setNote(revNote2);
    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    privateTRC20Builder.addShieldedReceives(revNoteBuilder2.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();

    privateTRC20Builder.setAsk(ByteString.copyFrom(expsk.getAsk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParameters(
                    privateTRC20Builder.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            transferParam.getTriggerContractInput());
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForBurn()
          throws ZksnarkException, ContractValidateException {
    librustzcashInitZksnarkParams();
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    long value = 60;
    String mintInput1 = mintParamsToHexString(mintParam1, value);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20Parameters.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());

    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    privateTRC20Builder.setAsk(ByteString.copyFrom(expsk.getAsk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setToAmount(60);
    privateTRC20Builder.setTransparentToAddress(ByteString.copyFrom(callerAddress));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters burnParam = blockingStubFull
            .createShieldedContractParameters(privateTRC20Builder.build());

    GrpcAPI.PrivateShieldedTRC20Parameters privateTrc20Params = privateTRC20Builder.build();
    logger.info("input parameters:");
    logger.info(Hex.toHexString(expsk.getAsk()));
    logger.info(Hex.toHexString(expsk.getNsk()));
    for (GrpcAPI.SpendNoteTRC20 spend : privateTrc20Params.getShieldedSpendsList()) {
      GrpcAPI.Note note = spend.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
      logger.info(Hex.toHexString(spend.getAlpha().toByteArray()));
      logger.info(Hex.toHexString(spend.getRoot().toByteArray()));
      logger.info(Hex.toHexString(spend.getPath().toByteArray()));
      logger.info(String.valueOf(spend.getPos()));
    }
    for (GrpcAPI.ReceiveNote rNote : privateTrc20Params.getShieldedReceivesList()) {
      GrpcAPI.Note note = rNote.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
    }
    logger.info(String.valueOf(privateTrc20Params.getToAmount()));
    logger.info(Hex.toHexString(privateTrc20Params.getTransparentToAddress().toByteArray()));
    logger.info(Hex.toHexString(privateTrc20Params.getShieldedTRC20ContractAddress()
            .toByteArray()));

    //check the proof
    boolean result;
    //verify spendProof && bindingSignature
    long ctx = JLibrustzcash.librustzcashSaplingVerificationCtxInit();
    ShieldContract.SpendDescription spend = burnParam.getSpendDescription(0);
    try {
      result = JLibrustzcash.librustzcashSaplingCheckSpend(
              new LibrustzcashParam.CheckSpendParams(ctx,
                      spend.getValueCommitment().toByteArray(),
                      spend.getAnchor().toByteArray(),
                      spend.getNullifier().toByteArray(),
                      spend.getRk().toByteArray(),
                      spend.getZkproof().toByteArray(),
                      spend.getSpendAuthoritySignature().toByteArray(),
                      burnParam.getMessageHash().toByteArray()));
      long valueBalance = value;
      result &= JLibrustzcash.librustzcashSaplingFinalCheck(
              new LibrustzcashParam.FinalCheckParams(ctx, valueBalance,
                      burnParam.getBindingSignature().toByteArray(),
                      burnParam.getMessageHash().toByteArray()));
    } catch (Throwable any) {
      result = false;
    } finally {
      JLibrustzcash.librustzcashSaplingVerificationCtxFree(ctx);
    }
    Assert.assertTrue(result);
    String txid2 = triggerBurn(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            burnParam.getTriggerContractInput());
    byte[] nf = burnParam.getSpendDescription(0).getNullifier().toByteArray();
    logger.info("..............burn result...........");
    logger.info(txid2);
    logger.info(Hex.toHexString(nf));
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForMintWithoutAsk() throws Exception {
    librustzcashInitZksnarkParams();
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.random();
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    byte[] ovk = expsk.getOvk();
    //ReceiveNote
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 50;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    byte[] contractAddress = WalletClient.decodeFromBase58Check(shieldedTRC20ContractAddress);
    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk.Builder paramBuilder = GrpcAPI
            .PrivateShieldedTRC20ParametersWithoutAsk.newBuilder();
    paramBuilder.setOvk(ByteString.copyFrom(ovk));
    paramBuilder.setFromAmount(revValue);
    paramBuilder.addShieldedReceives(revNoteBuilder.build());
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters trc20MintParams = blockingStubFull
            .createShieldedContractParametersWithoutAsk(paramBuilder.build());

    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk privateParams = paramBuilder.build();
    logger.info("input parameters:");
    logger.info(Hex.toHexString(expsk.getOvk()));
    logger.info(String.valueOf(privateParams.getFromAmount()));
    for (GrpcAPI.SpendNoteTRC20 spend : privateParams.getShieldedSpendsList()) {
      GrpcAPI.Note note = spend.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
      logger.info(Hex.toHexString(spend.getAlpha().toByteArray()));
      logger.info(Hex.toHexString(spend.getRoot().toByteArray()));
      logger.info(Hex.toHexString(spend.getPath().toByteArray()));
      logger.info(String.valueOf(spend.getPos()));
    }
    for (GrpcAPI.ReceiveNote rNote : privateParams.getShieldedReceivesList()) {
      GrpcAPI.Note note = rNote.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
    }
    logger.info(Hex.toHexString(privateParams.getShieldedTRC20ContractAddress().toByteArray()));

    //verify receiveProof && bindingSignature
    boolean result;
    long ctx = JLibrustzcash.librustzcashSaplingVerificationCtxInit();
    ShieldContract.ReceiveDescription revDesc = trc20MintParams.getReceiveDescription(0);
    try {
      result = JLibrustzcash.librustzcashSaplingCheckOutput(
              new LibrustzcashParam.CheckOutputParams(
                      ctx,
                      revDesc.getValueCommitment().toByteArray(),
                      revDesc.getNoteCommitment().toByteArray(),
                      revDesc.getEpk().toByteArray(),
                      revDesc.getZkproof().toByteArray()));
      long valueBalance = -revValue;
      result &= JLibrustzcash.librustzcashSaplingFinalCheck(
              new LibrustzcashParam.FinalCheckParams(
                      ctx,
                      valueBalance,
                      trc20MintParams.getBindingSignature().toByteArray(),
                      trc20MintParams.getMessageHash().toByteArray()));
    } catch (Throwable any) {
      result = false;
    } finally {
      JLibrustzcash.librustzcashSaplingVerificationCtxFree(ctx);
    }
    Assert.assertTrue(result);

    ShieldedTRC20TriggerContractParameters.Builder triggerParam =
            ShieldedTRC20TriggerContractParameters
                    .newBuilder();
    triggerParam.setShieldedTRC20Parameters(trc20MintParams);
    triggerParam.setAmount(revValue);
    BytesMessage triggerInput = blockingStubFull
            .getTriggerInputForShieldedTRC20Contract(triggerParam.build());
    Assert.assertArrayEquals(triggerInput.getValue().toByteArray(),
            Hex.decode(trc20MintParams.getTriggerContractInput()));
    String txid = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            Hex.toHexString(triggerInput.getValue().toByteArray()));
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransferWithoutAsk1v1() throws Exception {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull
            .createShieldedContractParameters(mintPrivateParam1);
    String mintInput1 = mintParamsToHexString(mintParam1, 60);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20ParametersWithoutAsk.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 60;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    FullViewingKey fvk = sk.fullViewingKey();
    privateTRC20Builder.setAk(ByteString.copyFrom(fvk.getAk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    PrivateShieldedTRC20ParametersWithoutAsk shieldedTRC20ParametersWithoutAsk = privateTRC20Builder
            .build();
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParametersWithoutAsk(shieldedTRC20ParametersWithoutAsk);

    logger.info(transferParam.toString());

    SpendAuthSigParameters.Builder signParamerters = SpendAuthSigParameters.newBuilder();
    signParamerters.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(0).getAlpha());
    signParamerters.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg = blockingStubFull.createSpendAuthSig(signParamerters.build());
    logger.info("...........spend authority signature...........");
    logger.info(String.valueOf(signMsg.getValue().size()));
    logger.info(Hex.toHexString(signMsg.getValue().toByteArray()));
    ShieldedTRC20TriggerContractParameters.Builder triggerParam =
            ShieldedTRC20TriggerContractParameters
                    .newBuilder();
    triggerParam.setShieldedTRC20Parameters(transferParam);
    triggerParam.addSpendAuthoritySignature(signMsg);
    BytesMessage triggerInput = blockingStubFull
            .getTriggerInputForShieldedTRC20Contract(triggerParam.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            Hex.toHexString(triggerInput.getValue().toByteArray()));
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");

  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransferWithoutAsk1v2() throws Exception {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 100, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    String mintInput1 = mintParamsToHexString(mintParam1, 100);
    String txid1 = triggerMint(blockingStubFull, contractAddress, callerAddress, privateKey,
            mintInput1);
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(blockingStubFull, contractAddress, callerAddress,
            privateKey,
            pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20ParametersWithoutAsk.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 30;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    //ReceiveNote 2
    GrpcAPI.ReceiveNote.Builder revNoteBuilder2 = GrpcAPI.ReceiveNote.newBuilder();
    FullViewingKey fullViewingKey2 = sk.fullViewingKey();
    IncomingViewingKey incomingViewingKey2 = fullViewingKey2.inViewingKey();
    PaymentAddress paymentAddress2 = incomingViewingKey2.address(DiversifierT.random()).get();
    long revValue2 = 70;
    byte[] memo2 = new byte[512];
    byte[] rcm2 = Note.generateR();
    String paymentAddressStr2 = KeyIo.encodePaymentAddress(paymentAddress2);
    GrpcAPI.Note revNote2 = getNote(revValue2, paymentAddressStr2, rcm2, memo2);
    revNoteBuilder2.setNote(revNote2);

    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    privateTRC20Builder.addShieldedReceives(revNoteBuilder2.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    FullViewingKey fvk = sk.fullViewingKey();
    privateTRC20Builder.setAk(ByteString.copyFrom(fvk.getAk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParametersWithoutAsk(privateTRC20Builder.build());
    logger.info(transferParam.toString());

    //trigger the contract
    PrivateShieldedTRC20ParametersWithoutAsk shieldedTRC20ParametersWithoutAsk = privateTRC20Builder
            .build();
    SpendAuthSigParameters.Builder signParamerters = SpendAuthSigParameters.newBuilder();
    signParamerters.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(0).getAlpha());
    signParamerters.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg = blockingStubFull.createSpendAuthSig(signParamerters.build());

    ShieldedTRC20TriggerContractParameters.Builder triggerParam =
            ShieldedTRC20TriggerContractParameters
                    .newBuilder();
    triggerParam.setShieldedTRC20Parameters(transferParam);
    triggerParam.addSpendAuthoritySignature(signMsg);
    BytesMessage triggerInput = blockingStubFull
            .getTriggerInputForShieldedTRC20Contract(triggerParam.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            Hex.toHexString(triggerInput.getValue().toByteArray()));
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransferWithoutAsk2v1() throws Exception {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam2 = mintParams(
            privateKey, 40, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam2 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam2);

    String mintInput1 = mintParamsToHexString(mintParam1, 60);
    String mintInput2 = mintParamsToHexString(mintParam2, 40);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    String txid2 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput2);
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info(txid2);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());

    // SpendNoteTRC20 2
    Optional<TransactionInfo> infoById2 = PublicMethed
            .getTransactionInfoById(txid2, blockingStubFull);
    byte[] tx2Data = infoById2.get().getLog(0).getData().toByteArray();
    long pos2 = bytes32Tolong(ByteArray.subArray(tx2Data, 0, 32));
    byte[] contractResult2 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos2);
    byte[] path2 = ByteArray.subArray(contractResult2, 32, 1056);
    byte[] root2 = ByteArray.subArray(contractResult2, 0, 32);
    logger.info(Hex.toHexString(contractResult2));
    GrpcAPI.SpendNoteTRC20.Builder note2Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note2Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note2Builder.setPos(pos2);
    note2Builder.setPath(ByteString.copyFrom(path2));
    note2Builder.setRoot(ByteString.copyFrom(root2));
    note2Builder.setNote(mintPrivateParam2.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20ParametersWithoutAsk.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());
    privateTRC20Builder.addShieldedSpends(note2Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 100;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    FullViewingKey fvk = sk.fullViewingKey();
    privateTRC20Builder.setAk(ByteString.copyFrom(fvk.getAk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParametersWithoutAsk(privateTRC20Builder.build());
    logger.info(transferParam.toString());

    //trigger the contract
    PrivateShieldedTRC20ParametersWithoutAsk shieldedTRC20ParametersWithoutAsk = privateTRC20Builder
            .build();
    SpendAuthSigParameters.Builder signParamerters1 = SpendAuthSigParameters.newBuilder();
    signParamerters1.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(0).getAlpha());
    signParamerters1.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters1.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg1 = blockingStubFull.createSpendAuthSig(signParamerters1.build());

    SpendAuthSigParameters.Builder signParamerters2 = SpendAuthSigParameters.newBuilder();
    signParamerters2.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(1).getAlpha());
    signParamerters2.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters2.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg2 = blockingStubFull.createSpendAuthSig(signParamerters2.build());

    ShieldedTRC20TriggerContractParameters.Builder triggerParam =
            ShieldedTRC20TriggerContractParameters
                    .newBuilder();
    triggerParam.setShieldedTRC20Parameters(transferParam);
    triggerParam.addSpendAuthoritySignature(signMsg1);
    triggerParam.addSpendAuthoritySignature(signMsg2);
    BytesMessage triggerInput = blockingStubFull
            .getTriggerInputForShieldedTRC20Contract(triggerParam.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            Hex.toHexString(triggerInput.getValue().toByteArray()));
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForTransferWithoutAsk2v2() throws Exception {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    //String  privateKey2 = "03d51abbd89cb8196f0efb6892f94d68fccc2c35f0b84609e5f12c55dd85aba8";
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam2 = mintParams(
            privateKey, 40, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam2 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam2);

    String mintInput1 = mintParamsToHexString(mintParam1, 60);
    String mintInput2 = mintParamsToHexString(mintParam2, 40);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    String txid2 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput2);
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info(txid2);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());

    // SpendNoteTRC20 2
    Optional<TransactionInfo> infoById2 = PublicMethed
            .getTransactionInfoById(txid2, blockingStubFull);
    byte[] tx2Data = infoById2.get().getLog(0).getData().toByteArray();
    long pos2 = bytes32Tolong(ByteArray.subArray(tx2Data, 0, 32));
    byte[] contractResult2 = triggerGetPath(
            blockingStubFull, contractAddress, callerAddress, privateKey, pos2);
    byte[] path2 = ByteArray.subArray(contractResult2, 32, 1056);
    byte[] root2 = ByteArray.subArray(contractResult2, 0, 32);
    logger.info(Hex.toHexString(contractResult2));
    GrpcAPI.SpendNoteTRC20.Builder note2Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note2Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note2Builder.setPos(pos2);
    note2Builder.setPath(ByteString.copyFrom(path2));
    note2Builder.setRoot(ByteString.copyFrom(root2));
    note2Builder.setNote(mintPrivateParam2.getShieldedReceives(0).getNote());
    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20ParametersWithoutAsk.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());
    privateTRC20Builder.addShieldedSpends(note2Builder.build());

    //ReceiveNote 1
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = spendingKey.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    long revValue = 30;
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(revValue, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);

    //ReceiveNote 2
    GrpcAPI.ReceiveNote.Builder revNoteBuilder2 = GrpcAPI.ReceiveNote.newBuilder();
    FullViewingKey fullViewingKey2 = sk.fullViewingKey();
    IncomingViewingKey incomingViewingKey2 = fullViewingKey2.inViewingKey();
    PaymentAddress paymentAddress2 = incomingViewingKey2.address(DiversifierT.random()).get();
    long revValue2 = 70;
    byte[] memo2 = new byte[512];
    byte[] rcm2 = Note.generateR();
    String paymentAddressStr2 = KeyIo.encodePaymentAddress(paymentAddress2);
    GrpcAPI.Note revNote2 = getNote(revValue2, paymentAddressStr2, rcm2, memo2);
    revNoteBuilder2.setNote(revNote2);

    privateTRC20Builder.addShieldedReceives(revNoteBuilder.build());
    privateTRC20Builder.addShieldedReceives(revNoteBuilder2.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    FullViewingKey fvk = sk.fullViewingKey();
    privateTRC20Builder.setAk(ByteString.copyFrom(fvk.getAk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setOvk(ByteString.copyFrom(expsk.getOvk()));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));

    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParametersWithoutAsk(privateTRC20Builder.build());
    logger.info(transferParam.toString());
    // checkTransferParams(transferParam);
    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk privateParams = privateTRC20Builder.build();
    logger.info("input parameters:");
    logger.info(Hex.toHexString(expsk.getNsk()));
    logger.info(Hex.toHexString(fvk.getAk()));
    logger.info(Hex.toHexString(expsk.getOvk()));
    //logger.info(String.valueOf(privateParams.getFromAmount()));
    for (GrpcAPI.SpendNoteTRC20 spend : privateParams.getShieldedSpendsList()) {
      GrpcAPI.Note note = spend.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
      logger.info(Hex.toHexString(spend.getAlpha().toByteArray()));
      logger.info(Hex.toHexString(spend.getRoot().toByteArray()));
      logger.info(Hex.toHexString(spend.getPath().toByteArray()));
      logger.info(String.valueOf(spend.getPos()));
    }
    for (GrpcAPI.ReceiveNote rNote : privateParams.getShieldedReceivesList()) {
      GrpcAPI.Note note = rNote.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
    }
    logger.info(Hex.toHexString(privateParams.getShieldedTRC20ContractAddress().toByteArray()));

    //trigger the contract
    PrivateShieldedTRC20ParametersWithoutAsk shieldedTRC20ParametersWithoutAsk = privateTRC20Builder
            .build();
    SpendAuthSigParameters.Builder signParamerters1 = SpendAuthSigParameters.newBuilder();
    signParamerters1.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(0).getAlpha());
    signParamerters1.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters1.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg1 = blockingStubFull.createSpendAuthSig(signParamerters1.build());

    SpendAuthSigParameters.Builder signParamerters2 = SpendAuthSigParameters.newBuilder();
    signParamerters2.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(1).getAlpha());
    signParamerters2.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters2.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg2 = blockingStubFull.createSpendAuthSig(signParamerters2.build());

    ShieldedTRC20TriggerContractParameters.Builder triggerParam =
            ShieldedTRC20TriggerContractParameters
                    .newBuilder();
    triggerParam.setShieldedTRC20Parameters(transferParam);
    triggerParam.addSpendAuthoritySignature(signMsg1);
    triggerParam.addSpendAuthoritySignature(signMsg2);
    logger.info("print the spend authority signature");
    logger.info(Hex.toHexString(signMsg1.getValue().toByteArray()));
    logger.info(Hex.toHexString(signMsg2.getValue().toByteArray()));

    BytesMessage triggerInput = blockingStubFull
            .getTriggerInputForShieldedTRC20Contract(triggerParam.build());
    String txid = triggerTransfer(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            Hex.toHexString(triggerInput.getValue().toByteArray()));
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testCreateShieldedContractParametersForBurnWithoutAsk() throws Exception {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, 60, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    long value = 60;
    String mintInput1 = mintParamsToHexString(mintParam1, value);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    logger.info("..............result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(blockingStubFull, contractAddress, callerAddress,
            privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());

    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20ParametersWithoutAsk.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    FullViewingKey fvk = expsk.fullViewingKey();
    privateTRC20Builder.setAk(ByteString.copyFrom(fvk.getAk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setToAmount(60);
    privateTRC20Builder.setTransparentToAddress(ByteString.copyFrom(callerAddress));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters transferParam = blockingStubFull
            .createShieldedContractParametersWithoutAsk(privateTRC20Builder.build());
    logger.info(transferParam.toString());

    GrpcAPI.PrivateShieldedTRC20ParametersWithoutAsk privateParams = privateTRC20Builder.build();
    logger.info("input parameters:");
    logger.info(Hex.toHexString(expsk.getNsk()));
    logger.info(Hex.toHexString(fvk.getAk()));
    for (GrpcAPI.SpendNoteTRC20 spend : privateParams.getShieldedSpendsList()) {
      GrpcAPI.Note note = spend.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
      logger.info(Hex.toHexString(spend.getAlpha().toByteArray()));
      logger.info(Hex.toHexString(spend.getRoot().toByteArray()));
      logger.info(Hex.toHexString(spend.getPath().toByteArray()));
      logger.info(String.valueOf(spend.getPos()));
    }
    for (GrpcAPI.ReceiveNote rNote : privateParams.getShieldedReceivesList()) {
      GrpcAPI.Note note = rNote.getNote();
      logger.info(String.valueOf(note.getValue()));
      logger.info(note.getPaymentAddress());
      logger.info(Hex.toHexString(note.getRcm().toByteArray()));
    }
    logger.info(String.valueOf(privateParams.getToAmount()));
    logger.info(Hex.toHexString(privateParams.getTransparentToAddress().toByteArray()));
    logger.info(Hex.toHexString(privateParams.getShieldedTRC20ContractAddress().toByteArray()));

    //trigger the contract
    PrivateShieldedTRC20ParametersWithoutAsk shieldedTRC20ParametersWithoutAsk = privateTRC20Builder
            .build();
    SpendAuthSigParameters.Builder signParamerters = SpendAuthSigParameters.newBuilder();
    signParamerters.setAlpha(shieldedTRC20ParametersWithoutAsk.getShieldedSpends(0).getAlpha());
    signParamerters.setAsk(ByteString.copyFrom(expsk.getAsk()));
    signParamerters.setTxHash(transferParam.getMessageHash());
    BytesMessage signMsg = blockingStubFull.createSpendAuthSig(signParamerters.build());

    ShieldedTRC20TriggerContractParameters.Builder triggerParam =
            ShieldedTRC20TriggerContractParameters
                    .newBuilder();
    triggerParam.setShieldedTRC20Parameters(transferParam);
    triggerParam.addSpendAuthoritySignature(signMsg);
    triggerParam.setAmount(value);
    triggerParam.setTransparentToAddress(ByteString.copyFrom(callerAddress));
    BytesMessage triggerInput = blockingStubFull
            .getTriggerInputForShieldedTRC20Contract(triggerParam.build());
    logger.info("print the trigger params");
    logger.info(Hex.toHexString(signMsg.getValue().toByteArray()));
    logger.info(String.valueOf(value));
    logger.info(Hex.toHexString(callerAddress));

    String txid = triggerBurn(
            blockingStubFull, contractAddress, callerAddress, privateKey,
            Hex.toHexString(triggerInput.getValue().toByteArray()));
    logger.info("..............transfer result...........");
    logger.info(txid);
    logger.info("..............end..............");
  }

  @Ignore
  @Test
  public void testScanShieldedTRC20NotesbyIvk() throws ZksnarkException {
    int statNum = 9200;
    int endNum = 9240;
    librustzcashInitZksnarkParams();
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    FullViewingKey fvk = sk.fullViewingKey();
    byte[] ivk = fvk.inViewingKey().value;
    GrpcAPI.IvkDecryptTRC20Parameters.Builder paramBuilder = GrpcAPI
            .IvkDecryptTRC20Parameters.newBuilder();
    logger.info(Hex.toHexString(contractAddress));
    logger.info(Hex.toHexString(ivk));
    logger.info(Hex.toHexString(fvk.getAk()));
    logger.info(Hex.toHexString(fvk.getNk()));

    paramBuilder.setAk(ByteString.copyFrom(fvk.getAk()));
    paramBuilder.setNk(ByteString.copyFrom(fvk.getNk()));
    paramBuilder.setIvk(ByteString.copyFrom(ivk));
    paramBuilder.setStartBlockIndex(statNum);
    paramBuilder.setEndBlockIndex(endNum);
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.DecryptNotesTRC20 scannedNotes = blockingStubFull.scanShieldedTRC20NotesbyIvk(
            paramBuilder.build());
    for (GrpcAPI.DecryptNotesTRC20.NoteTx noteTx : scannedNotes.getNoteTxsList()) {
      logger.info(noteTx.toString());
    }
  }

  @Ignore
  @Test
  public void testscanShieldedTRC20NotesbyOvk() throws ZksnarkException {
    int statNum = 9200;
    int endNum = 9240;
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    FullViewingKey fvk = sk.fullViewingKey();
    GrpcAPI.OvkDecryptTRC20Parameters.Builder paramBuilder = GrpcAPI.OvkDecryptTRC20Parameters
            .newBuilder();
    logger.info(Hex.toHexString(contractAddress));
    logger.info(Hex.toHexString(fvk.getOvk()));

    paramBuilder.setOvk(ByteString.copyFrom(fvk.getOvk()));
    paramBuilder.setStartBlockIndex(statNum);
    paramBuilder.setEndBlockIndex(endNum);
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.DecryptNotesTRC20 scannedNotes = blockingStubFull.scanShieldedTRC20NotesbyOvk(
            paramBuilder.build());
    for (GrpcAPI.DecryptNotesTRC20.NoteTx noteTx : scannedNotes.getNoteTxsList()) {
      logger.info(noteTx.toString());
    }
  }

  @Ignore
  @Test
  public void isShieldedTRC20ContractNoteSpent() throws ZksnarkException {
    int statNum = 9200;
    int endNum = 9240;
    librustzcashInitZksnarkParams();
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    FullViewingKey fvk = sk.fullViewingKey();
    byte[] ivk = fvk.inViewingKey().value;
    GrpcAPI.IvkDecryptTRC20Parameters.Builder paramBuilder = GrpcAPI.IvkDecryptTRC20Parameters
            .newBuilder();

    paramBuilder.setAk(ByteString.copyFrom(fvk.getAk()));
    paramBuilder.setNk(ByteString.copyFrom(fvk.getNk()));
    paramBuilder.setIvk(ByteString.copyFrom(ivk));
    paramBuilder.setStartBlockIndex(statNum);
    paramBuilder.setEndBlockIndex(endNum);
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.DecryptNotesTRC20 scannedNotes = blockingStubFull.scanShieldedTRC20NotesbyIvk(
            paramBuilder.build());
    for (GrpcAPI.DecryptNotesTRC20.NoteTx noteTx : scannedNotes.getNoteTxsList()) {
      logger.info(noteTx.toString());
    }

    GrpcAPI.NfTRC20Parameters.Builder NfBuilfer;
    NfBuilfer = GrpcAPI.NfTRC20Parameters.newBuilder();
    NfBuilfer.setAk(ByteString.copyFrom(fvk.getAk()));
    NfBuilfer.setNk(ByteString.copyFrom(fvk.getNk()));
    NfBuilfer.setPosition(271);
    NfBuilfer.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    NfBuilfer.setNote(scannedNotes.getNoteTxs(0).getNote());
    GrpcAPI.NullifierResult result = blockingStubFull.isShieldedTRC20ContractNoteSpent(
            NfBuilfer.build());
    Assert.assertTrue(result.getIsSpent());

    NfBuilfer = GrpcAPI.NfTRC20Parameters.newBuilder();
    NfBuilfer.setAk(ByteString.copyFrom(fvk.getAk()));
    NfBuilfer.setNk(ByteString.copyFrom(fvk.getNk()));
    NfBuilfer.setPosition(272);
    NfBuilfer.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    NfBuilfer.setNote(scannedNotes.getNoteTxs(1).getNote());
    GrpcAPI.NullifierResult result1 = blockingStubFull.isShieldedTRC20ContractNoteSpent(
            NfBuilfer.build());
    Assert.assertTrue(result1.getIsSpent());
    GrpcAPI.NfTRC20Parameters nfParma = NfBuilfer.build();
    logger.info(String.valueOf(nfParma.getNote().getValue()));
    logger.info(nfParma.getNote().getPaymentAddress());
    logger.info(Hex.toHexString(nfParma.getNote().getRcm().toByteArray()));
    logger.info(Hex.toHexString(nfParma.getNote().getMemo().toByteArray()));
    logger.info(Hex.toHexString(nfParma.getAk().toByteArray()));
    logger.info(Hex.toHexString(nfParma.getNk().toByteArray()));
    logger.info(String.valueOf(nfParma.getPosition()));
    logger.info(Hex.toHexString(nfParma.getShieldedTRC20ContractAddress().toByteArray()));

    NfBuilfer = GrpcAPI.NfTRC20Parameters.newBuilder();
    NfBuilfer.setAk(ByteString.copyFrom(fvk.getAk()));
    NfBuilfer.setNk(ByteString.copyFrom(fvk.getNk()));
    NfBuilfer.setPosition(274);
    NfBuilfer.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    NfBuilfer.setNote(scannedNotes.getNoteTxs(2).getNote());
    GrpcAPI.NullifierResult result2 = blockingStubFull.isShieldedTRC20ContractNoteSpent(
            NfBuilfer.build());
    Assert.assertFalse(result2.getIsSpent());
  }

  @Ignore
  @Test
  public void testTriggerNullifer() throws ZksnarkException, ContractValidateException {
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    byte[] callerAddress = WalletClient.decodeFromBase58Check(pubAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    long value = 60;
    GrpcAPI.PrivateShieldedTRC20Parameters mintPrivateParam1 = mintParams(
            privateKey, value, shieldedTRC20ContractAddress);
    GrpcAPI.ShieldedTRC20Parameters mintParam1 = blockingStubFull.createShieldedContractParameters(
            mintPrivateParam1);
    String mintInput1 = mintParamsToHexString(mintParam1, value);
    String txid1 = triggerMint(
            blockingStubFull, contractAddress, callerAddress, privateKey, mintInput1);
    logger.info("..............min result...........");
    logger.info(txid1);
    logger.info("..............end..............");

    // SpendNoteTRC20 1
    Optional<TransactionInfo> infoById1 = PublicMethed
            .getTransactionInfoById(txid1, blockingStubFull);
    byte[] tx1Data = infoById1.get().getLog(0).getData().toByteArray();
    long pos1 = bytes32Tolong(ByteArray.subArray(tx1Data, 0, 32));
    byte[] contractResult1 = triggerGetPath(blockingStubFull, contractAddress, callerAddress,
            privateKey, pos1);
    byte[] path1 = ByteArray.subArray(contractResult1, 32, 1056);
    byte[] root1 = ByteArray.subArray(contractResult1, 0, 32);
    logger.info(Hex.toHexString(contractResult1));
    GrpcAPI.SpendNoteTRC20.Builder note1Builder = GrpcAPI.SpendNoteTRC20.newBuilder();
    note1Builder.setAlpha(ByteString.copyFrom(Note.generateR()));
    note1Builder.setPos(pos1);
    note1Builder.setPath(ByteString.copyFrom(path1));
    note1Builder.setRoot(ByteString.copyFrom(root1));
    note1Builder.setNote(mintPrivateParam1.getShieldedReceives(0).getNote());

    GrpcAPI.PrivateShieldedTRC20Parameters.Builder privateTRC20Builder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    privateTRC20Builder.addShieldedSpends(note1Builder.build());
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    privateTRC20Builder.setAsk(ByteString.copyFrom(expsk.getAsk()));
    privateTRC20Builder.setNsk(ByteString.copyFrom(expsk.getNsk()));
    privateTRC20Builder.setToAmount(60);
    privateTRC20Builder.setTransparentToAddress(ByteString.copyFrom(callerAddress));
    privateTRC20Builder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.ShieldedTRC20Parameters burnParam = blockingStubFull
            .createShieldedContractParameters(privateTRC20Builder.build());
    String burnInput = burnParamsToHexString(burnParam, value, callerAddress);
    String txid2 = triggerBurn(blockingStubFull, contractAddress, callerAddress, privateKey,
            burnInput);
    byte[] nf = burnParam.getSpendDescription(0).getNullifier().toByteArray();
    logger.info("..............burn result...........");
    logger.info(txid2);
    logger.info(Hex.toHexString(nf));
    logger.info("..............end..............");

    //test nullifer
    String methodSign = "nullifiers(bytes32)";
    byte[] selector = new byte[4];
    System.arraycopy(Hash.sha3(methodSign.getBytes()), 0, selector, 0, 4);
    byte[] input = ByteUtil.merge(selector, nf);
    SmartContractOuterClass.TriggerSmartContract.Builder triggerBuilder = SmartContractOuterClass
            .TriggerSmartContract.newBuilder();
    triggerBuilder.setContractAddress(ByteString.copyFrom(contractAddress));
    triggerBuilder.setData(ByteString.copyFrom(input));
    GrpcAPI.TransactionExtention trxExt2 = blockingStubFull.triggerConstantContract(
            triggerBuilder.build());
    String code = trxExt2.getResult().getCode().toString();
    boolean bool = trxExt2.getResult().getResult();
    List<ByteString> list = trxExt2.getConstantResultList();
    byte[] listBytes = new byte[0];
    for (ByteString bs : list) {
      listBytes = ByteUtil.merge(listBytes, bs.toByteArray());
    }
    logger.info("..............nullifier result...........");
    logger.info(code);
    logger.info(String.valueOf(bool));
    logger.info(Hex.toHexString(listBytes));
    logger.info("..............end..............");
    Assert.assertArrayEquals(nf, listBytes);
  }

  @Ignore
  @Test
  public void testSolidityScanShieldedTRC20NotesbyIvk() throws ZksnarkException {
    int statNum = 9200;
    int endNum = 9240;
    librustzcashInitZksnarkParams();
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    FullViewingKey fvk = sk.fullViewingKey();
    byte[] ivk = fvk.inViewingKey().value;
    GrpcAPI.IvkDecryptTRC20Parameters.Builder paramBuilder = GrpcAPI
            .IvkDecryptTRC20Parameters.newBuilder();
    logger.info(Hex.toHexString(contractAddress));
    logger.info(Hex.toHexString(ivk));
    logger.info(Hex.toHexString(fvk.getAk()));
    logger.info(Hex.toHexString(fvk.getNk()));

    paramBuilder.setAk(ByteString.copyFrom(fvk.getAk()));
    paramBuilder.setNk(ByteString.copyFrom(fvk.getNk()));
    paramBuilder.setIvk(ByteString.copyFrom(ivk));
    paramBuilder.setStartBlockIndex(statNum);
    paramBuilder.setEndBlockIndex(endNum);
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.DecryptNotesTRC20 scannedNotes = blockingStubSolidity.scanShieldedTRC20NotesbyIvk(
            paramBuilder.build());
    for (GrpcAPI.DecryptNotesTRC20.NoteTx noteTx : scannedNotes.getNoteTxsList()) {
      logger.info(noteTx.toString());
    }
  }

  @Ignore
  @Test
  public void testSolidityScanShieldedTRC20NotesbyOvk() throws ZksnarkException {
    int statNum = 9200;
    int endNum = 9240;
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    FullViewingKey fvk = sk.fullViewingKey();
    GrpcAPI.OvkDecryptTRC20Parameters.Builder paramBuilder = GrpcAPI.OvkDecryptTRC20Parameters
            .newBuilder();
    logger.info(Hex.toHexString(contractAddress));
    logger.info(Hex.toHexString(fvk.getOvk()));

    paramBuilder.setOvk(ByteString.copyFrom(fvk.getOvk()));
    paramBuilder.setStartBlockIndex(statNum);
    paramBuilder.setEndBlockIndex(endNum);
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.DecryptNotesTRC20 scannedNotes = blockingStubSolidity.scanShieldedTRC20NotesbyOvk(
            paramBuilder.build());
    for (GrpcAPI.DecryptNotesTRC20.NoteTx noteTx : scannedNotes.getNoteTxsList()) {
      logger.info(noteTx.toString());
    }
  }

  @Ignore
  @Test
  public void testSolidityIsShieldedTRC20ContractNoteSpent() throws ZksnarkException {
    int statNum = 9200;
    int endNum = 9240;
    librustzcashInitZksnarkParams();
    byte[] contractAddress = WalletClient
            .decodeFromBase58Check(shieldedTRC20ContractAddress);
    SpendingKey sk = SpendingKey.decode(privateKey);
    FullViewingKey fvk = sk.fullViewingKey();
    byte[] ivk = fvk.inViewingKey().value;
    GrpcAPI.IvkDecryptTRC20Parameters.Builder paramBuilder = GrpcAPI.IvkDecryptTRC20Parameters
            .newBuilder();

    paramBuilder.setAk(ByteString.copyFrom(fvk.getAk()));
    paramBuilder.setNk(ByteString.copyFrom(fvk.getNk()));
    paramBuilder.setIvk(ByteString.copyFrom(ivk));
    paramBuilder.setStartBlockIndex(statNum);
    paramBuilder.setEndBlockIndex(endNum);
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    GrpcAPI.DecryptNotesTRC20 scannedNotes = blockingStubSolidity.scanShieldedTRC20NotesbyIvk(
            paramBuilder.build());
    for (GrpcAPI.DecryptNotesTRC20.NoteTx noteTx : scannedNotes.getNoteTxsList()) {
      logger.info(noteTx.toString());
    }

    GrpcAPI.NfTRC20Parameters.Builder NfBuilfer;
    NfBuilfer = GrpcAPI.NfTRC20Parameters.newBuilder();
    NfBuilfer.setAk(ByteString.copyFrom(fvk.getAk()));
    NfBuilfer.setNk(ByteString.copyFrom(fvk.getNk()));
    NfBuilfer.setPosition(271);
    NfBuilfer.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    NfBuilfer.setNote(scannedNotes.getNoteTxs(0).getNote());
    GrpcAPI.NullifierResult result = blockingStubSolidity.isShieldedTRC20ContractNoteSpent(
            NfBuilfer.build());
    Assert.assertTrue(result.getIsSpent());

    NfBuilfer = GrpcAPI.NfTRC20Parameters.newBuilder();
    NfBuilfer.setAk(ByteString.copyFrom(fvk.getAk()));
    NfBuilfer.setNk(ByteString.copyFrom(fvk.getNk()));
    NfBuilfer.setPosition(272);
    NfBuilfer.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    NfBuilfer.setNote(scannedNotes.getNoteTxs(1).getNote());
    GrpcAPI.NullifierResult result1 = blockingStubSolidity.isShieldedTRC20ContractNoteSpent(
            NfBuilfer.build());
    Assert.assertTrue(result1.getIsSpent());
    GrpcAPI.NfTRC20Parameters nfParma = NfBuilfer.build();
    logger.info(String.valueOf(nfParma.getNote().getValue()));
    logger.info(nfParma.getNote().getPaymentAddress());
    logger.info(Hex.toHexString(nfParma.getNote().getRcm().toByteArray()));
    logger.info(Hex.toHexString(nfParma.getNote().getMemo().toByteArray()));
    logger.info(Hex.toHexString(nfParma.getAk().toByteArray()));
    logger.info(Hex.toHexString(nfParma.getNk().toByteArray()));
    logger.info(String.valueOf(nfParma.getPosition()));
    logger.info(Hex.toHexString(nfParma.getShieldedTRC20ContractAddress().toByteArray()));

    NfBuilfer = GrpcAPI.NfTRC20Parameters.newBuilder();
    NfBuilfer.setAk(ByteString.copyFrom(fvk.getAk()));
    NfBuilfer.setNk(ByteString.copyFrom(fvk.getNk()));
    NfBuilfer.setPosition(274);
    NfBuilfer.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    NfBuilfer.setNote(scannedNotes.getNoteTxs(2).getNote());
    GrpcAPI.NullifierResult result2 = blockingStubSolidity.isShieldedTRC20ContractNoteSpent(
            NfBuilfer.build());
    Assert.assertFalse(result2.getIsSpent());
  }


  private GrpcAPI.Note getNote(long value, String paymentAddress, byte[] rcm, byte[] memo) {
    GrpcAPI.Note.Builder noteBuilder = GrpcAPI.Note.newBuilder();
    noteBuilder.setValue(value);
    noteBuilder.setPaymentAddress(paymentAddress);
    noteBuilder.setRcm(ByteString.copyFrom(rcm));
    noteBuilder.setMemo(ByteString.copyFrom(memo));
    return noteBuilder.build();
  }

  private String mintParamsToHexString(GrpcAPI.ShieldedTRC20Parameters mintParams, long value) {
    byte[] mergedBytes;
    ShieldContract.ReceiveDescription revDesc = mintParams.getReceiveDescription(0);
    mergedBytes = ByteUtil.merge(
            longTo32Bytes(value),
            revDesc.getNoteCommitment().toByteArray(),
            revDesc.getValueCommitment().toByteArray(),
            revDesc.getEpk().toByteArray(),
            revDesc.getZkproof().toByteArray(),
            mintParams.getBindingSignature().toByteArray(),
            revDesc.getCEnc().toByteArray(),
            revDesc.getCOut().toByteArray(),
            new byte[12]
    );
    return Hex.toHexString(mergedBytes);
  }

  private String triggerMint(WalletGrpc.WalletBlockingStub blockingStubFull, byte[] contractAddress,
                             byte[] callerAddress, String privateKey, String input) {
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    String txid = PublicMethed.triggerContract(contractAddress,
            "mint(uint64,bytes32[9],bytes32[2],bytes32[21])",
            input,
            true,
            0L, 1000000000L,
            callerAddress, privateKey,
            blockingStubFull);
    // logger.info(txid);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
            .getTransactionInfoById(txid, blockingStubFull);
    logger.info("Trigger energytotal is " + infoById.get().getReceipt().getEnergyUsageTotal());
    Assert.assertEquals(
            Transaction.Result.contractResult.SUCCESS, infoById.get().getReceipt().getResult());
    return txid;
  }

  private GrpcAPI.PrivateShieldedTRC20Parameters mintParams(String privKey,
                                                            long value, String contractAddr)
          throws ZksnarkException, ContractValidateException {
    librustzcashInitZksnarkParams();
    long fromAmount = value;
    SpendingKey sk = SpendingKey.decode(privKey);
    ExpandedSpendingKey expsk = sk.expandedSpendingKey();
    byte[] ask = expsk.getAsk();
    byte[] nsk = expsk.getNsk();
    byte[] ovk = expsk.getOvk();

    // ReceiveNote
    GrpcAPI.ReceiveNote.Builder revNoteBuilder = GrpcAPI.ReceiveNote.newBuilder();
    // SpendingKey spendingKey = SpendingKey.random();
    FullViewingKey fullViewingKey = sk.fullViewingKey();
    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
    byte[] memo = new byte[512];
    byte[] rcm = Note.generateR();
    String paymentAddressStr = KeyIo.encodePaymentAddress(paymentAddress);
    GrpcAPI.Note revNote = getNote(value, paymentAddressStr, rcm, memo);
    revNoteBuilder.setNote(revNote);
    byte[] contractAddress = WalletClient.decodeFromBase58Check(contractAddr);

    GrpcAPI.PrivateShieldedTRC20Parameters.Builder paramBuilder = GrpcAPI
            .PrivateShieldedTRC20Parameters.newBuilder();
    paramBuilder.setAsk(ByteString.copyFrom(ask));
    paramBuilder.setNsk(ByteString.copyFrom(nsk));
    paramBuilder.setOvk(ByteString.copyFrom(ovk));
    paramBuilder.setFromAmount(fromAmount);
    paramBuilder.addShieldedReceives(revNoteBuilder.build());
    paramBuilder.setShieldedTRC20ContractAddress(ByteString.copyFrom(contractAddress));
    return paramBuilder.build();
  }

  private String transferParamsToHexString(GrpcAPI.ShieldedTRC20Parameters params) {
    byte[] input = new byte[0];
    byte[] spendAuthSig = new byte[0];
    byte[] output = new byte[0];
    byte[] c = new byte[0];
    byte[] bindingSig;
    byte[] mergedBytes;
    List<ShieldContract.SpendDescription> spendDescs = params.getSpendDescriptionList();
    for (ShieldContract.SpendDescription spendDesc : spendDescs) {
      input = ByteUtil.merge(input,
              spendDesc.getNullifier().toByteArray(),
              spendDesc.getAnchor().toByteArray(),
              spendDesc.getValueCommitment().toByteArray(),
              spendDesc.getRk().toByteArray(),
              spendDesc.getZkproof().toByteArray()
      );
      spendAuthSig = ByteUtil.merge(
              spendAuthSig, spendDesc.getSpendAuthoritySignature().toByteArray());
    }
    byte[] inputOffsetbytes = longTo32Bytes(192);
    long spendCount = spendDescs.size();
    byte[] spendCountBytes = longTo32Bytes(spendCount);
    byte[] authOffsetBytes = longTo32Bytes(192 + 32 + 320 * spendCount);
    List<ShieldContract.ReceiveDescription> recvDescs = params.getReceiveDescriptionList();
    for (ShieldContract.ReceiveDescription recvDesc : recvDescs) {
      output = ByteUtil.merge(output,
              recvDesc.getNoteCommitment().toByteArray(),
              recvDesc.getValueCommitment().toByteArray(),
              recvDesc.getEpk().toByteArray(),
              recvDesc.getZkproof().toByteArray()
      );
      c = ByteUtil.merge(c,
              recvDesc.getCEnc().toByteArray(),
              recvDesc.getCOut().toByteArray(),
              new byte[12]
      );
    }
    long recvCount = recvDescs.size();
    byte[] recvCountBytes = longTo32Bytes(recvCount);
    byte[] outputOffsetbytes = longTo32Bytes(192 + 32 + 320 * spendCount + 32 + 64 * spendCount);
    byte[] coffsetBytes = longTo32Bytes(192 + 32 + 320 * spendCount + 32 + 64 * spendCount + 32
            + 288 * recvCount);
    bindingSig = params.getBindingSignature().toByteArray();
    mergedBytes = ByteUtil.merge(inputOffsetbytes,
            authOffsetBytes,
            outputOffsetbytes,
            bindingSig,
            coffsetBytes,
            spendCountBytes,
            input,
            spendCountBytes,
            spendAuthSig,
            recvCountBytes,
            output,
            recvCountBytes,
            c
    );
    //logger.info(ByteArray.toHexString(mergedBytes));
    return Hex.toHexString(mergedBytes);
  }

  private String triggerTransfer(WalletGrpc.WalletBlockingStub blockingStubFull,
                                 byte[] contractAddress,
                                 byte[] callerAddress, String privateKey, String input) {
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    String txid = PublicMethed.triggerContract(contractAddress,
            "transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])",
            input,
            true,
            0L, 1000000000L,
            callerAddress, privateKey,
            blockingStubFull);
    //  logger.info(txid);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
            .getTransactionInfoById(txid, blockingStubFull);
    logger.info("Trigger energytotal is " + infoById.get().getReceipt().getEnergyUsageTotal());
    Assert.assertEquals(
            Transaction.Result.contractResult.SUCCESS, infoById.get().getReceipt().getResult());
    return txid;
  }

  private byte[] triggerGetPath(WalletGrpc.WalletBlockingStub blockingStubFull,
                                byte[] contractAddress,
                                byte[] callerAddress, String privateKey, long pos) {
    GrpcAPI.TransactionExtention transactionExtention =
            PublicMethed.triggerConstantContractForExtention(contractAddress,
                    "getPath(uint256)",
                    Hex.toHexString(longTo32Bytes(pos)),
                    true,
                    0L,
                    0,
                    "0",
                    0,
                    callerAddress, privateKey, blockingStubFull);
    Assert.assertEquals(0, transactionExtention.getResult().getCodeValue());
    byte[] result = transactionExtention.getConstantResult(0).toByteArray();
    Assert.assertEquals(1056, result.length);
    return result;
  }

  private String triggerBurn(WalletGrpc.WalletBlockingStub blockingStubFull, byte[] contractAddress,
                             byte[] callerAddress, String privateKey, String input) {
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    String txid = PublicMethed.triggerContract(contractAddress,
            "burn(bytes32[10],bytes32[2],uint64,bytes32[2],address)",
            input,
            true,
            0L, 1000000000L,
            callerAddress, privateKey,
            blockingStubFull);
    // logger.info(txid);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
            .getTransactionInfoById(txid, blockingStubFull);
    logger.info("Trigger energytotal is " + infoById.get().getReceipt().getEnergyUsageTotal());
    Assert.assertEquals(
            Transaction.Result.contractResult.SUCCESS, infoById.get().getReceipt().getResult());
    return txid;
  }

  private String burnParamsToHexString(GrpcAPI.ShieldedTRC20Parameters burnParams, long value,
                                       byte[] transparentToAddress) {
    byte[] mergedBytes;
    byte[] payTo = new byte[32];
    System.arraycopy(transparentToAddress, 0, payTo, 11, 21);
    ShieldContract.SpendDescription spendDesc = burnParams.getSpendDescription(0);
    mergedBytes = ByteUtil.merge(
            spendDesc.getNullifier().toByteArray(),
            spendDesc.getAnchor().toByteArray(),
            spendDesc.getValueCommitment().toByteArray(),
            spendDesc.getRk().toByteArray(),
            spendDesc.getZkproof().toByteArray(),
            spendDesc.getSpendAuthoritySignature().toByteArray(),
            longTo32Bytes(value),
            burnParams.getBindingSignature().toByteArray(),
            payTo
    );
    logger.info("merged bytes: " + ByteArray.toHexString(mergedBytes));
    return Hex.toHexString(mergedBytes);
  }

  private byte[] longTo32Bytes(long value) {
    byte[] longBytes = ByteArray.fromLong(value);
    byte[] zeroBytes = new byte[24];
    return ByteUtil.merge(zeroBytes, longBytes);
  }

  private long bytes32Tolong(byte[] value) {
    return ByteArray.toLong(value);
  }

}
